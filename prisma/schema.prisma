// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // For Vercel
  // Uses connection pooling
  // url = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            Int         @id @default(autoincrement())
  role_id       Int
  email         String      @unique
  password      String
  name          String
  phone_number  String
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  deleted_at    DateTime?

  role          Role @relation(fields: [role_id], references: [id])
  cartItems     CartItem[]
}

model Role {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  users         User[]
}

model Product {
  id            Int       @id @default(autoincrement())
  name          String
  price         Decimal   @db.Decimal(12, 2)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?
  cartItems     CartItem[]
  tempCartItems TemporaryCartItem[]
}

model TemporaryCartItem {
  id            Int       @id @default(autoincrement())
  session_id    String
  product_id    Int
  quantity      Int       @default(1)
  product       Product   @relation(fields: [product_id], references: [id])
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  @@unique([session_id, product_id], name: "session_id_product_id_key")
}

model CartItem {
  id            Int       @id @default(autoincrement())
  user_id       Int
  product_id    Int
  quantity      Int       @default(1)

  product       Product   @relation(fields: [product_id], references: [id])
  user          User      @relation(fields: [user_id], references: [id])
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  @@unique([user_id, product_id], name: "user_id_product_id_key")
}